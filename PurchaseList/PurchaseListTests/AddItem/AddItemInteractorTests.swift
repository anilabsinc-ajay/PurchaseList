//
//  AddItemInteractorTests.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 11/3/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import PurchaseList
import XCTest

class AddItemInteractorTests: XCTestCase{
    // MARK: Subject under test
    
    var sut: AddItemInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupAddItemInteractor()
    }
    
    override func tearDown(){
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupAddItemInteractor(){
        sut = AddItemInteractor()
    }
    
    
    class AddItemInteractorOutputSpy: AddItemInteractorOutput{
        // MARK: Method call expectations
        var presentInsertItemCalled = false
        
        // MARK: Spied methods
        
        func presentInsertItem(response: AddItem.Insert.Response){
            presentInsertItemCalled = true
        }
    }
    
    class ItemWorkerSpy: ItemWorker{
        var insertItemCalled = false
        override func createItem(item: Item, completionHandler: (ItemStoreError?) -> Void) {
            insertItemCalled = true
            completionHandler(nil)
        }
    }

    
    // MARK: Tests
    
    func testInsertItemShouldAskItemWorkerToInsertItemAndPresentToFormatResult(){
        //GIVEN
        let addItemInteractorOutputSpy = AddItemInteractorOutputSpy()
        sut.output = addItemInteractorOutputSpy
        let itemWorkerSpy = ItemWorkerSpy(itemStore: ItemMemoryStore())
        sut.worker = itemWorkerSpy
        
        // When
        let request = AddItem.Insert.Request(name: "test 1", quantity: "3")
        sut.insertItem(request: request)
        
        // Then
        XCTAssert(itemWorkerSpy.insertItemCalled)
        XCTAssert(addItemInteractorOutputSpy.presentInsertItemCalled)
    }
}

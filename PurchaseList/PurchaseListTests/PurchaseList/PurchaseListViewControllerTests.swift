//
//  PurchaseListViewControllerTests.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 10/28/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import PurchaseList
import XCTest

class PurchaseListViewControllerTests: XCTestCase{
    // MARK: Subject under test
    
    var sut: PurchaseListViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        window = UIWindow()
        setupPurchaseListViewController()
    }
    
    override func tearDown(){
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPurchaseListViewController(){
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle(for: type(of: self)))
        sut = storyboard.instantiateViewController(withIdentifier: "PurchaseListViewController") as! PurchaseListViewController
    }
    
    func loadView(){
        window.addSubview(sut.view)
        RunLoop.current.run(until: NSDate() as Date)
    }
    
    class TableViewSpy: UITableView
    {
        // MARK: Method call expectations
        var reloadDataCalled = false
        
        // MARK: Spied methods
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }
    
    class PurchaseListViewControllerOutputSpy: PurchaseListViewControllerOutput{
        // MARK: Method call expectations
        var fetchItemsCalled = false
        var requestDeleteItemCalled = false
        
        // MARK: Spied methods
        func fetchItems(request:PurchaseList.FetchItems.Request){
            fetchItemsCalled = true
        }
        
        func requestDeleteItem(request: PurchaseList.Delete.Request){
            requestDeleteItemCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchItemsWhenViewIsLoaded(){
        // Given
        let purchaseListViewControllerOutputSpy = PurchaseListViewControllerOutputSpy()
        sut.output = purchaseListViewControllerOutputSpy
        // When
        loadView()
        // Then
        XCTAssert(purchaseListViewControllerOutputSpy.fetchItemsCalled, "Should fetch orders when the view is loaded")
    }
    
    
    func testShouldDeleteItemWhenDeleteItemMethodIsCalled(){
        
        // Given
        let purchaseListViewControllerOutputSpy = PurchaseListViewControllerOutputSpy()
        sut.output = purchaseListViewControllerOutputSpy
        
        // When
        sut.deleteItem(atIndex: 0)
        
        XCTAssert(purchaseListViewControllerOutputSpy.requestDeleteItemCalled)
    }
    
    
    func testShouldDisplayFetchedItems(){
        
        // GIVEN
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        let displayedItems = [PurchaseList.FetchItems.ViewModel.DisplayedItem(name: "test 1", quantity: "13")]
        let viewModel = PurchaseList.FetchItems.ViewModel(displayedItems: displayedItems)
        
        // WHEN
        sut.displayFetchedItems(viewModel: viewModel)
        
        XCTAssert(tableViewSpy.reloadDataCalled)
    }
    
    
    
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne(){
        // Given
        loadView()
        let tableView = sut.tableView
        
        // When
        let numberOfSections = sut.numberOfSections(in: tableView!)
        
        // Then
        XCTAssertEqual(numberOfSections, 1)
    }
    
    func testNumberOfRowsInAnySectionShouldEqualNumberOfItemsToDisplay(){
        // Given
        loadView()
        let tableView = sut.tableView
        let displayedItems = [PurchaseList.FetchItems.ViewModel.DisplayedItem(name: "test 1", quantity: "13")]
        sut.displayedItems = displayedItems
    
        // When
        let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, displayedItems.count)
    }
    
    func testShouldConfigureTableViewCellToDisplayItem(){
        // Given
        loadView()
        let tableView = sut.tableView
        let displayedItems = [PurchaseList.FetchItems.ViewModel.DisplayedItem(name: "test 1", quantity: "13")]
        sut.displayedItems = displayedItems
        
        // WHEN
        let indexPath = IndexPath(row: 0, section: 0)
        let cell = sut.tableView(tableView!, cellForRowAt: indexPath)
        
        XCTAssertEqual(cell.textLabel?.text, "test 1")
        XCTAssertEqual(cell.detailTextLabel?.text, "13")
       
    }
    
    
}

//
//  PurchaseListPresenterTests.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 10/28/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import PurchaseList
import XCTest

class PurchaseListPresenterTests: XCTestCase{
    // MARK: Subject under test
    
    var sut: PurchaseListPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupPurchaseListPresenter()
    }
    
    override func tearDown(){
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPurchaseListPresenter(){
        sut = PurchaseListPresenter()
    }
    
    
    class PurchaseListPresenterOutputSpy: PurchaseListPresenterOutput{
        var displayedFetchedItems = false
        var displayDeleteResultSuccessful = false
        var displayDeleteResultError = false
        var fetchedViewModel : PurchaseList.FetchItems.ViewModel!
        var deleteViewModelError: PurchaseList.Delete.ViewModel.Error!
        var deleteViewModelSuccessful: PurchaseList.Delete.ViewModel.Successful!
        
       func displayFetchedItems(viewModel:PurchaseList.FetchItems.ViewModel){
            displayedFetchedItems = true
            fetchedViewModel = viewModel
       }
        
       func displayDeleteResultSuccessful(viewModel: PurchaseList.Delete.ViewModel.Successful){
            displayDeleteResultSuccessful = true
            deleteViewModelSuccessful = viewModel
       }
        
       func displayDeleteResultError(viewModel: PurchaseList.Delete.ViewModel.Error){
            displayDeleteResultError = true
            deleteViewModelError = viewModel
        }
        
        
    }
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testPresentFetchedItemsShouldFormatFetchedItemsForDisplay(){
        // Given
        let purchaseListPresenterOutputSpy = PurchaseListPresenterOutputSpy()
        sut.output = purchaseListPresenterOutputSpy
        
        let items = [Item(name:"Item 1", quantity: NSNumber(value: 2), id: NSNumber(value: 1))]
        
        let response = PurchaseList.FetchItems.Response(items: items)
        
        // When
        sut.presentFetchedItems(response: response)
        
        // Then
        XCTAssert(purchaseListPresenterOutputSpy.displayedFetchedItems)
        
        let displayedItems = purchaseListPresenterOutputSpy.fetchedViewModel.displayedItems
        for displayedItem in displayedItems{
            XCTAssertEqual(displayedItem.name, "Item 1")
            XCTAssertEqual(displayedItem.quantity, "2")
        }
    }
    
    
    func testPresentDeleteResultError(){
        // Given
        let purchaseListPresenterOutputSpy = PurchaseListPresenterOutputSpy()
        sut.output = purchaseListPresenterOutputSpy
        
        let response = PurchaseList.Delete.Response(index: 0, successfully: false)
        
        //When
        sut.presentDeleteItem(response: response)
        let alertController = purchaseListPresenterOutputSpy.deleteViewModelError.alertController
        XCTAssertTrue(purchaseListPresenterOutputSpy.displayDeleteResultError)
        XCTAssertEqual(alertController.message, "Error found, please try later")
    }
    
    func testPresentDeleteResultSuccessful(){
        // Given
        let purchaseListPresenterOutputSpy = PurchaseListPresenterOutputSpy()
        sut.output = purchaseListPresenterOutputSpy
        
        let response = PurchaseList.Delete.Response(index: 1, successfully: true)
        
        //When
        sut.presentDeleteItem(response: response)
        XCTAssertTrue(purchaseListPresenterOutputSpy.displayDeleteResultSuccessful)
        XCTAssertEqual(purchaseListPresenterOutputSpy.deleteViewModelSuccessful.indexPath.row, 1)
    }
}

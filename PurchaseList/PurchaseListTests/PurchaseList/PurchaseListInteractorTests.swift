//
//  PurchaseListInteractorTests.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 10/28/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import PurchaseList
import XCTest

class PurchaseListInteractorTests: XCTestCase{
    // MARK: Subject under test
    
    var sut: PurchaseListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupPurchaseListInteractor()
    }
    
    override func tearDown(){
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPurchaseListInteractor(){
        sut = PurchaseListInteractor()
    }
    
    class PurchaseListInteractorOutputSpy: PurchaseListInteractorOutput{
        // MARK: Method call expectations
        var presentFetchedItemsCalled = false
        var presentDeleteItemCalled = false
        // MARK: Spied methods
        func presentFetchedItems(response:PurchaseList.FetchItems.Response){
            presentFetchedItemsCalled = true
        }
        
        func presentDeleteItem(response: PurchaseList.Delete.Response){
            presentDeleteItemCalled = true
        }
    }
    
    
    class ItemWorkerSpy: ItemWorker{
        var fetchItemsCalled = false
        var deleteItemCalled = false
        override func fetchAllItems(completionHandler: ([Item]) -> Void) {
            fetchItemsCalled = true
            completionHandler([])
        }
        
        override func deleteItem(id: NSNumber, completionHandler: (ItemStoreError?) -> Void) {
            deleteItemCalled = true
            completionHandler(nil)
        }
    }
    
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testFetchItemsShouldAskItemWorkerToFetchItemsAndPresentToFormatResult(){
        //GIVEN
        let purchaseListInteractorOutputSpy = PurchaseListInteractorOutputSpy()
        sut.output = purchaseListInteractorOutputSpy
        let itemWorkerSpy = ItemWorkerSpy(itemStore: ItemMemoryStore())
        sut.worker = itemWorkerSpy
        
        // When
        let request = PurchaseList.FetchItems.Request()
        sut.fetchItems(request: request)
        
        // Then
        XCTAssert(itemWorkerSpy.fetchItemsCalled)
        XCTAssert(purchaseListInteractorOutputSpy.presentFetchedItemsCalled)
    }
    
    
    func testDeleteItemShouldAskItemWorkerToDeleteItemAndPresentToFormatResult(){
        
        let purchaseListInteractorOutputSpy = PurchaseListInteractorOutputSpy()
        sut.output = purchaseListInteractorOutputSpy
        let itemWorkerSpy = ItemWorkerSpy(itemStore: ItemMemoryStore())
        sut.worker = itemWorkerSpy
        sut.itemsArray = [Item(name:"Item 1", quantity: NSNumber(value: 2), id: NSNumber(value: 1))]
        
        // WHEN
        
        let request = PurchaseList.Delete.Request(index: 0)
        sut.requestDeleteItem(request: request)
        
        //THEN
        XCTAssert(itemWorkerSpy.deleteItemCalled)
        XCTAssert(purchaseListInteractorOutputSpy.presentDeleteItemCalled)
        
    }
}

//
//  AddItemPresenter.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 11/2/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol AddItemPresenterInput{
    func presentInsertItem(response: AddItem.Insert.Response)
}

protocol AddItemPresenterOutput: class{
    func displayInsertItemError(viewModel: AddItem.Insert.ViewModel)
    func displayInsertItemSuccessfully(viewModel: AddItem.Insert.ViewModel)
}

class AddItemPresenter: AddItemPresenterInput{
    weak var output: AddItemPresenterOutput!
    
    // MARK: Presentation logic
    
    func presentInsertItem(response: AddItem.Insert.Response){
        // NOTE: Format the response from the Interactor and pass the result back to the View Controller
        if response.result == .NoErrors {
            let alertController = UIAlertController(title: nil, message: "Item saved successfully", preferredStyle: UIAlertControllerStyle.alert)
            output.displayInsertItemSuccessfully(viewModel: AddItem.Insert.ViewModel(alert: alertController))
        }
        else{
            let message = createAlertViewForErrors(errorType: response.result)
            let alertController = UIAlertController(title: nil, message: message, preferredStyle: UIAlertControllerStyle.alert)
            alertController.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default, handler: nil))
            output.displayInsertItemError(viewModel: AddItem.Insert.ViewModel(alert: alertController))
        }
    }
    
    
    func createAlertViewForErrors(errorType: AddItemResult) -> String{
        if errorType == .OneOrMoreParametersAreNil{
            return "Please check that all parameters aren't empty"
        }
        return "The quantity must be a valid number"
    }
}

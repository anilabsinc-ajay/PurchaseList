//
//  PurchaseListPresenter.swift
//  PurchaseList
//
//  Created by Cesar Brenes on 10/28/16.
//  Copyright (c) 2016 Cesar Brenes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol PurchaseListPresenterInput{
     func presentFetchedItems(response:PurchaseList.FetchItems.Response)
     func presentDeleteItem(response: PurchaseList.Delete.Response)
}

protocol PurchaseListPresenterOutput: class{
    func displayFetchedItems(viewModel:PurchaseList.FetchItems.ViewModel)
    func displayDeleteResultSuccessful(viewModel: PurchaseList.Delete.ViewModel.Successful)
    func displayDeleteResultError(viewModel: PurchaseList.Delete.ViewModel.Error)
}

class PurchaseListPresenter: PurchaseListPresenterInput{
    weak var output: PurchaseListPresenterOutput!
    
    // MARK: Presentation logic
    
    func presentFetchedItems(response:PurchaseList.FetchItems.Response){
        let viewModel = PurchaseList.FetchItems.ViewModel(displayedItems: response.items.map{$0.toDisplayedItem()})
        output.displayFetchedItems(viewModel: viewModel)
    }
    
    func presentDeleteItem(response: PurchaseList.Delete.Response){
        if response.successfully {
            presentDeleteItemSuccessful(atIndex: response.index)
        }
        else{
            presentDeleteItemError()
        }
    }
    
    func presentDeleteItemSuccessful(atIndex: Int){
        let viewModel = PurchaseList.Delete.ViewModel.Successful(indexPath: IndexPath(item: atIndex, section: 0))
        output.displayDeleteResultSuccessful(viewModel: viewModel)
    }
    
    func presentDeleteItemError(){
        let alertController = UIAlertController(title: nil, message: "Error found, please try later", preferredStyle: UIAlertControllerStyle.alert)
        alertController.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default, handler: nil))
        let viewModel = PurchaseList.Delete.ViewModel.Error(alertController: alertController)
        output.displayDeleteResultError(viewModel: viewModel)
    }
}

extension Item{
    func toDisplayedItem() -> PurchaseList.FetchItems.ViewModel.DisplayedItem{
        var quantityString = ""
        if let quantity = quantity{
            quantityString = String(quantity.intValue)
        }
        return PurchaseList.FetchItems.ViewModel.DisplayedItem(name: name, quantity: quantityString)
    }
}
